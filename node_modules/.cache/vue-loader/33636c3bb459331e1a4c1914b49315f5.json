{"remainingRequest":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/IoT.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/IoT.vue","mtime":1626863039992},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKbGV0IG1xdHRDbGllbnQKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnSW9UJywKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoewogICAgICBpbml0OiAoc3RhdGUpID0+IHN0YXRlLmluaXRpYWxpemVkLAogICAgICBoYXNoOiAoc3RhdGUpID0+IHN0YXRlLmhhc2hLZXkKICAgIH0pCiAgfSwKICB3YXRjaDogewogICAgLy8gVGhlIGVmZmVjdCBvZiB0aGlzIGlzIHRvIHdhaXQgdW50aWwgdGhlIHVzZXIgaXMgbG9nZ2VkCiAgICAvLyBpbiBiZWZvcmUgbWFraW5nIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbi4KICAgIGluaXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMuaW5pdCkgewogICAgICAgIHRoaXMubW91bnRJT1QoKQogICAgICAgIGNvbnNvbGUubG9nKCdNb3VudGluZyB3ZWJzb2NrZXQnKQogICAgICB9CiAgICB9LAogICAgaGFzaDogZnVuY3Rpb24oKSB7CiAgICAgIGNvbnNvbGUubG9nKCdJb1Qgc3Vic2NyaWJpbmcgdG8gJywgdGhpcy5oYXNoKQogICAgICB0aGlzLnN1YnNjcmliZSh0aGlzLmhhc2gpCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzdWJzY3JpYmUgKHRvcGljKSB7CiAgICAgIGNvbnNvbGUubG9nKCdJb1Qgc3ViY3JpYmluZyB0byAnLCB0b3BpYykKICAgICAgbXF0dENsaWVudC5zdWJzY3JpYmUodG9waWMpCiAgICB9LAogICAgbW91bnRJT1QgKCkgewogICAgICBsZXQgX3N0b3JlID0gdGhpcy4kc3RvcmUKCiAgICAgIGNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKQogICAgICBjb25zdCBBV1NJb1REYXRhID0gcmVxdWlyZSgnYXdzLWlvdC1kZXZpY2Utc2RrJykKICAgICAgbGV0IGVycm9yQ291bnQgPSAwCgogICAgICBjb25zdCBBV1NDb25maWd1cmF0aW9uID0gewogICAgICAgIHBvb2xJZDogdGhpcy4kcG9vbElkLCAvLyd1cy1lYXN0LTE6ZTQ4MDNkM2ItNDJkNS00OTZmLTljNWEtNDA4ZjIwZWIyOGU0JywgLy8gJ1lvdXJDb2duaXRvSWRlbnRpdHlQb29sSWQnCiAgICAgICAgaG9zdDogdGhpcy4kaG9zdCwgLy8gJ1lvdXJBd3NJb1RFbmRwb2ludCcsIGUuZy4gJ3ByZWZpeC5pb3QudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20nCiAgICAgICAgcmVnaW9uOiB0aGlzLiRyZWdpb24gLy8gJ1lvdXJBd3NSZWdpb24nLCBlLmcuICd1cy1lYXN0LTEnCiAgICAgIH0KCiAgICAgIHZhciBjdXJyZW50bHlTdWJzY3JpYmVkVG9waWMgPSAnbmV3LWFuc3dlcicKICAgICAgdmFyIGNsaWVudElkID0gJ2Fza0Fyb3VuZE1lLScgKyAoTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCkgKyAxKSkKICAgICAgQVdTLmNvbmZpZy5yZWdpb24gPSBBV1NDb25maWd1cmF0aW9uLnJlZ2lvbgoKICAgICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMoewogICAgICAgIElkZW50aXR5UG9vbElkOiBBV1NDb25maWd1cmF0aW9uLnBvb2xJZAogICAgICB9KQoKICAgICAgY29uc29sZS5sb2coJ0lvVCBjcmVhdGVkJykKICAgICAgbXF0dENsaWVudCA9IEFXU0lvVERhdGEuZGV2aWNlKHsKICAgICAgICByZWdpb246IEFXUy5jb25maWcucmVnaW9uLAogICAgICAgIGhvc3Q6IEFXU0NvbmZpZ3VyYXRpb24uaG9zdCwKICAgICAgICBjbGllbnRJZDogY2xpZW50SWQsCiAgICAgICAgcHJvdG9jb2w6ICd3c3MnLAogICAgICAgIG1heGltdW1SZWNvbm5lY3RUaW1lTXM6IDgwMDAsCiAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgIGFjY2Vzc0tleUlkOiAnJywKICAgICAgICBzZWNyZXRLZXk6ICcnLAogICAgICAgIHNlc3Npb25Ub2tlbjogJycKICAgICAgfSkKCiAgICAgIGNvbnN0IGNvZ25pdG9JZGVudGl0eSA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5KCkKICAgICAgY29uc3QgZ2V0Q3JlZHMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscy5nZXQoZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3JldHJpZXZlZCBpZGVudGl0eTogJyArIEFXUy5jb25maWcuY3JlZGVudGlhbHMuaWRlbnRpdHlJZCwgZGF0YSkKICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gewogICAgICAgICAgICAgIElkZW50aXR5SWQ6IEFXUy5jb25maWcuY3JlZGVudGlhbHMuaWRlbnRpdHlJZAogICAgICAgICAgICB9CiAgICAgICAgICAgIGNvZ25pdG9JZGVudGl0eS5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KHBhcmFtcywgZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICBtcXR0Q2xpZW50LnVwZGF0ZVdlYlNvY2tldENyZWRlbnRpYWxzKGRhdGEuQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQsCiAgICAgICAgICAgICAgICAgIGRhdGEuQ3JlZGVudGlhbHMuU2VjcmV0S2V5LAogICAgICAgICAgICAgICAgICBkYXRhLkNyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbikKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2Vycm9yIHJldHJpZXZpbmcgY3JlZGVudGlhbHM6ICcgKyBlcnIpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2Vycm9yIHJldHJpZXZpbmcgaWRlbnRpdHk6JyArIGVycikKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9CgogICAgICBtcXR0Q2xpZW50Lm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCdtcXR0Q2xpZW50IGNvbm5lY3RlZCcpCiAgICAgICAgbXF0dENsaWVudC5zdWJzY3JpYmUoY3VycmVudGx5U3Vic2NyaWJlZFRvcGljKQogICAgICB9KQoKICAgICAgbXF0dENsaWVudC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKGVycm9yQ291bnQgPiAwKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbXF0dENsaWVudCBlcnJvcjonLCBlcnIpCiAgICAgICAgfQogICAgICAgIGVycm9yQ291bnQrKwogICAgICAgIGdldENyZWRzKCkKICAgICAgfSkKCiAgICAgIG1xdHRDbGllbnQub24oJ21lc3NhZ2UnLCBmdW5jdGlvbiAodG9waWMsIHBheWxvYWQpIHsKICAgICAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKHBheWxvYWQudG9TdHJpbmcoKSkKICAgICAgICBjb25zb2xlLmxvZygnSW9UIG1zZzogJywgdG9waWMsIG1zZykKICAgICAgICBpZiAodG9waWMgPT09ICduZXctYW5zd2VyJykgewogICAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZScpCiAgICAgICAgICBfc3RvcmUuY29tbWl0KCd1cGRhdGVRdWVzdGlvbicsIG1zZykKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2coJ05ldyBxdWVzdGlvbicpCiAgICAgICAgICBfc3RvcmUuY29tbWl0KCdzYXZlUXVlc3Rpb24nLCBtc2cpCiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0KfQo="},{"version":3,"sources":["IoT.vue"],"names":[],"mappings":";;;;;AAKA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IoT.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  let mqttClient\n\n  export default {\n    name: 'IoT',\n    computed: {\n      ...mapState({\n        init: (state) => state.initialized,\n        hash: (state) => state.hashKey\n      })\n    },\n    watch: {\n      // The effect of this is to wait until the user is logged\n      // in before making the websocket connection.\n      init: function () {\n        if (this.init) {\n          this.mountIOT()\n          console.log('Mounting websocket')\n        }\n      },\n      hash: function() {\n        console.log('IoT subscribing to ', this.hash)\n        this.subscribe(this.hash)\n      }\n    },\n    methods: {\n      subscribe (topic) {\n        console.log('IoT subcribing to ', topic)\n        mqttClient.subscribe(topic)\n      },\n      mountIOT () {\n        let _store = this.$store\n\n        const AWS = require('aws-sdk')\n        const AWSIoTData = require('aws-iot-device-sdk')\n        let errorCount = 0\n\n        const AWSConfiguration = {\n          poolId: this.$poolId, //'us-east-1:e4803d3b-42d5-496f-9c5a-408f20eb28e4', // 'YourCognitoIdentityPoolId'\n          host: this.$host, // 'YourAwsIoTEndpoint', e.g. 'prefix.iot.us-east-1.amazonaws.com'\n          region: this.$region // 'YourAwsRegion', e.g. 'us-east-1'\n        }\n\n        var currentlySubscribedTopic = 'new-answer'\n        var clientId = 'askAroundMe-' + (Math.floor((Math.random() * 100000) + 1))\n        AWS.config.region = AWSConfiguration.region\n\n        AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n          IdentityPoolId: AWSConfiguration.poolId\n        })\n\n        console.log('IoT created')\n        mqttClient = AWSIoTData.device({\n          region: AWS.config.region,\n          host: AWSConfiguration.host,\n          clientId: clientId,\n          protocol: 'wss',\n          maximumReconnectTimeMs: 8000,\n          debug: false,\n          accessKeyId: '',\n          secretKey: '',\n          sessionToken: ''\n        })\n\n        const cognitoIdentity = new AWS.CognitoIdentity()\n        const getCreds = function () {\n          AWS.config.credentials.get(function (err, data) {\n            if (!err) {\n              console.log('retrieved identity: ' + AWS.config.credentials.identityId, data)\n              const params = {\n                IdentityId: AWS.config.credentials.identityId\n              }\n              cognitoIdentity.getCredentialsForIdentity(params, function (err, data) {\n                if (!err) {\n                  mqttClient.updateWebSocketCredentials(data.Credentials.AccessKeyId,\n                    data.Credentials.SecretKey,\n                    data.Credentials.SessionToken)\n                } else {\n                  // console.log('error retrieving credentials: ' + err)\n                }\n              })\n            } else {\n              // console.log('error retrieving identity:' + err)\n            }\n          })\n        }\n\n        mqttClient.on('connect', function () {\n          console.log('mqttClient connected')\n          mqttClient.subscribe(currentlySubscribedTopic)\n        })\n\n        mqttClient.on('error', function (err) {\n          if (errorCount > 0) {\n            console.log('mqttClient error:', err)\n          }\n          errorCount++\n          getCreds()\n        })\n\n        mqttClient.on('message', function (topic, payload) {\n          const msg = JSON.parse(payload.toString())\n          console.log('IoT msg: ', topic, msg)\n          if (topic === 'new-answer') {\n            console.log('update')\n            _store.commit('updateQuestion', msg)\n          } else {\n            console.log('New question')\n            _store.commit('saveQuestion', msg)\n          }\n        })\n      }\n    }\n  }\n</script>"]}]}