{"remainingRequest":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/Question.vue","mtime":1626863039992},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBheGlvcyBmcm9tICJheGlvcyIKaW1wb3J0IHsgbWFwU3RhdGUgfSBmcm9tICd2dWV4JwoKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJIb21lVmlldyIsCiAgcHJvcHM6IFsncXVlc3Rpb24nXSwKICBkYXRhOiBmdW5jdGlvbiAoKSB7ICAgCiAgICByZXR1cm4gewogICAgICBkaWFsb2c6IGZhbHNlLAogICAgICBtYXBEaWFsb2c6IGZhbHNlLAogICAgICBtYXJrZXJzOiBbXSwKICAgICAgc3RhclJhdGluZzogMCwKICAgICAgc2F2aW5nOiBmYWxzZSwKICAgICAgY3VycmVudFF1ZXN0aW9uOiB7CiAgICAgICAgbGF0aXR1ZGU6IDQwLjczNTgyMzUsCiAgICAgICAgbG9uZ2l0dWRlOiAtNzMuOTkyNzEwMiwKICAgICAgfQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKHsKICAgICAgcG9zaXRpb246IChzdGF0ZSkgPT4gc3RhdGUucG9zaXRpb24KICAgIH0pCiAgfSwKICBtZXRob2RzOiB7CiAgICBvcGVuRGlhbG9nKHF1ZXN0aW9uKSB7CiAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uKQogICAgICB0aGlzLmN1cnJlbnRRdWVzdGlvbiA9IHF1ZXN0aW9uCiAgICAgIHRoaXMuc3RhclJhdGluZyA9IDAgIC8vIHJlc2V0IHJhdGluZwogICAgICB0aGlzLmRpYWxvZyA9IHRydWUKICAgIH0sCiAgICBvcGVuTWFwRGlhbG9nKHF1ZXN0aW9uKSB7CiAgICAgIGNvbnNvbGUubG9nKHF1ZXN0aW9uKQogICAgICB0aGlzLmN1cnJlbnRRdWVzdGlvbiA9IHF1ZXN0aW9uCiAgICAgIHRoaXMubWFya2VycyA9IFtdCiAgICAgIHRoaXMubWFwRGlhbG9nID0gdHJ1ZQogICAgfSwgICAgCiAgICBhZGRNYXJrZXIoZXZlbnQpIHsKICAgICAgY29uc3QgbWFya2VyID0gewogICAgICAgIGxhdDogZXZlbnQubGF0TG5nLmxhdCgpLAogICAgICAgIGxuZzogZXZlbnQubGF0TG5nLmxuZygpCiAgICAgIH07CiAgICAgIHRoaXMubWFya2Vycy5wb3AoKSAvLyBPbmx5IG9uZSBtYXJrZXIgYWxsb3dlZAogICAgICB0aGlzLm1hcmtlcnMucHVzaCh7IHBvc2l0aW9uOiBtYXJrZXIgfSkKICAgIH0sCiAgICBhc3luYyBzdWJtaXREaWFsb2codHlwZSkgewogICAgICBjb25zb2xlLmxvZygnc3VibWl0RGlhbG9nJykKCiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdGhpcy4kYXV0aC5nZXRUb2tlblNpbGVudGx5KCk7CiAgICAgIGNvbnN0IHVybCA9IGAke3RoaXMuJEFQSXVybH0vYW5zd2Vyc2AKICAgICAgdGhpcy5zYXZpbmcgPSB0cnVlCgogICAgICAvLyBCdWlsZCBwYXlsb2FkIGZvciBzdGFyL2dlbyB0eXBlIHF1ZXN0aW9ucwogICAgICBsZXQgcGF5bG9hZCA9IHsKICAgICAgICBxdWVzdGlvbjogdGhpcy5xdWVzdGlvbiwKICAgICAgICB0eXBlCiAgICAgIH0KCiAgICAgIGlmICh0eXBlID09PSAnc3RhcicpIHsKICAgICAgICBwYXlsb2FkLnJhdGluZyA9IHRoaXMuc3RhclJhdGluZwogICAgICB9IGVsc2UgewogICAgICAgIHBheWxvYWQubGF0ID0gdGhpcy5tYXJrZXJzWzBdLnBvc2l0aW9uLmxhdAogICAgICAgIHBheWxvYWQubG5nID0gdGhpcy5tYXJrZXJzWzBdLnBvc2l0aW9uLmxuZwogICAgICB9CgogICAgICBjb25zb2xlLmxvZygnUGF5bG9hZDogJywgcGF5bG9hZCkKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLnBvc3QodXJsLCBwYXlsb2FkLAogICAgICAgICAgewogICAgICAgICAgICBoZWFkZXJzOiB7IAogICAgICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0b2tlbn1gCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgY29uc29sZS5sb2coJ1Jlc3VsdDogJywgZGF0YSkgCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnLCBlcnIpCiAgICAgIH0KCiAgICAgIHRoaXMuZGlhbG9nID0gZmFsc2UKICAgICAgdGhpcy5tYXBEaWFsb2cgPSBmYWxzZQogICAgICB0aGlzLnNhdmluZyA9IGZhbHNlCiAgICB9CiAgfQp9Cgo="},{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyHA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Question.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container class=\"pa-0 ma-0\">\n    <!-- Question card -->\n     <v-card class=\"my-2 ma-2\">\n      <v-card-text>\n        <div class=\"my-2 subtitle-1\">{{ question.question }}</div>\n\n        <!-- Readonly star rating showing aggregated score -->\n        <div v-if=\"question.type==='Star'\">\n          <v-rating :value=\"question.avgScore\" color=\"amber\" dense half-increments readonly size=\"24\"\n          ></v-rating> ({{ question.answers }} ratings)\n        </div>\n\n        <div class=\"my-4 subtitle-2\">\n          Posted <strong>{{ moment.unix(question.created/1000).fromNow() }}</strong>\n          <strong v-if=\"question.author===$store.getters.getUser.sub\"> by you</strong>\n        </div>\n      </v-card-text>\n  \n      <!-- Only show \"Answer\" button for questions asked by different user -->\n      <v-card-actions v-if=\"question.author!=$store.getters.getUser.sub\">\n\n        <!-- For star rating questions -->\n        <div v-if=\"question.type==='Star'\">\n          <v-btn text color=\"orange\" dark @click=\"openDialog(question)\">\n            Answer\n          </v-btn>\n        </div>\n\n        <!-- For geo rating questions -->\n        <div v-if=\"question.type==='Geo'\">\n          <v-btn text color=\"orange\" dark @click=\"openMapDialog(question)\">\n            Answer on map\n          </v-btn>\n          <v-btn :disabled=\"question.answers===0\" text color=\"orange\" dark :to=\"{ name: 'Answers', query: { hk: question.hashKey, rk: question.rangeKey }}\">\n            See results\n          </v-btn>\n        </div>\n\n        <!-- <v-spacer></v-spacer> -->\n      </v-card-actions>\n      <v-divider class=\"mx-4\"></v-divider> \n    </v-card> \n\n    <!-- Popup star rating dialog for answering question -->\n    <v-dialog v-model=\"dialog\" persistent max-width=\"290\">\n      <v-card>\n        <v-card-title class=\"headline\">Your rating:</v-card-title>\n        <v-card-text>\n          <!-- <div class=\"my-1 subtitle-2\">Your rating: </div> -->\n          <v-rating v-model=\"starRating\"\n            color=\"amber\"\n            dense\n            half-increments\n            size=\"40\"\n          ></v-rating>\n        </v-card-text>            \n        <v-card-actions> \n          <v-spacer></v-spacer>\n          <v-btn :disabled=\"starRating===0||saving===true\" color=\"success\" text @click=\"submitDialog('star')\">Submit</v-btn>\n          <v-btn :disabled=\"saving===true\" color=\"error\" text @click=\"dialog=false\">Cancel</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Popup geo rating dialog for answering question -->\n    <v-dialog v-model=\"mapDialog\" persistent>\n      <v-card>\n        <v-card-title class=\"headline\">Drop a pin on your answer:</v-card-title>\n        <v-card-text>\n          <!-- <div class=\"my-1 subtitle-2\">Your rating: </div> -->\n          <GmapMap\n            ref=\"gmap\"\n            :center=\"{lat:this.position.latitude, lng:this.position.longitude}\"\n            :zoom=\"7\"\n            map-type-id=\"roadmap\"\n            style=\"width: 100%; height: 400px\"\n            \n            :options=\"{\n              zoomControl: false,\n              zoom: 11,\n              mapTypeControl: false,\n              scaleControl: false,\n              streetViewControl: false,\n              rotateControl: false,\n              fullscreenControl: false,\n              disableDefaultUI: false\n            }\"\n          > \n            <GmapMarker\n              :key=\"index\"\n              v-for=\"(m, index) in markers\"\n              :position=\"m.position\"\n              @click=\"center=m.position\"\n            ></GmapMarker>    \n            <GmapCircle\n              :center=\"{lat:this.currentQuestion.latitude, lng:this.currentQuestion.longitude}\"\n              :radius=\"8000\"\n              @click=\"addMarker\"\n              :options=\"{\n                fillColor:'blue',\n                fillOpacity:0.1,\n                strokeColor: '#0000FF',\n                strokeOpacity: 0.2,\n                strokeWeight: 5\n              }\"\n            />\n          </GmapMap>     \n        </v-card-text>            \n        <v-card-actions> \n          <v-spacer></v-spacer>\n          <v-btn :disabled=\"markers.length===0||saving===true\" color=\"success\" text @click=\"submitDialog('geo')\">Submit</v-btn>\n          <v-btn :disabled=\"saving===true\" color=\"error\" text @click=\"mapDialog=false\">Cancel</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n  </v-container>\n</template>\n\n<script>\nimport axios from \"axios\"\nimport { mapState } from 'vuex'\n\nexport default {\n  name: \"HomeView\",\n  props: ['question'],\n  data: function () {   \n    return {\n      dialog: false,\n      mapDialog: false,\n      markers: [],\n      starRating: 0,\n      saving: false,\n      currentQuestion: {\n        latitude: 40.7358235,\n        longitude: -73.9927102,\n      }\n    }\n  },\n  computed: {\n    ...mapState({\n      position: (state) => state.position\n    })\n  },\n  methods: {\n    openDialog(question) {\n      console.log(question)\n      this.currentQuestion = question\n      this.starRating = 0  // reset rating\n      this.dialog = true\n    },\n    openMapDialog(question) {\n      console.log(question)\n      this.currentQuestion = question\n      this.markers = []\n      this.mapDialog = true\n    },    \n    addMarker(event) {\n      const marker = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      };\n      this.markers.pop() // Only one marker allowed\n      this.markers.push({ position: marker })\n    },\n    async submitDialog(type) {\n      console.log('submitDialog')\n\n      const token = await this.$auth.getTokenSilently();\n      const url = `${this.$APIurl}/answers`\n      this.saving = true\n\n      // Build payload for star/geo type questions\n      let payload = {\n        question: this.question,\n        type\n      }\n\n      if (type === 'star') {\n        payload.rating = this.starRating\n      } else {\n        payload.lat = this.markers[0].position.lat\n        payload.lng = this.markers[0].position.lng\n      }\n\n      console.log('Payload: ', payload)\n      try {\n        const { data } = await axios.post(url, payload,\n          {\n            headers: { \n              Authorization: `Bearer ${token}`\n            }\n          })\n        console.log('Result: ', data) \n      } catch (err) {\n        console.error('Error: ', err)\n      }\n\n      this.dialog = false\n      this.mapDialog = false\n      this.saving = false\n    }\n  }\n}\n\n</script>\n"]}]}