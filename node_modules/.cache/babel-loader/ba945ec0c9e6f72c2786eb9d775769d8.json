{"remainingRequest":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/babel-loader/lib/index.js!/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/IoT.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/src/components/IoT.vue","mtime":1626863039992},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/@vue/cli-plugin-babel/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/@vue/cli-service/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/duyennguyen/STREAMING/ask-around-me/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2R1eWVubmd1eWVuL1NUUkVBTUlORy9hc2stYXJvdW5kLW1lL2Zyb250ZW5kL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmcuanMiOwovLwovLwovLwovLwppbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnOwp2YXIgbXF0dENsaWVudDsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdJb1QnLAogIGNvbXB1dGVkOiBfb2JqZWN0U3ByZWFkKHt9LCBtYXBTdGF0ZSh7CiAgICBpbml0OiBmdW5jdGlvbiBpbml0KHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5pbml0aWFsaXplZDsKICAgIH0sCiAgICBoYXNoOiBmdW5jdGlvbiBoYXNoKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5oYXNoS2V5OwogICAgfQogIH0pKSwKICB3YXRjaDogewogICAgLy8gVGhlIGVmZmVjdCBvZiB0aGlzIGlzIHRvIHdhaXQgdW50aWwgdGhlIHVzZXIgaXMgbG9nZ2VkCiAgICAvLyBpbiBiZWZvcmUgbWFraW5nIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbi4KICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgIGlmICh0aGlzLmluaXQpIHsKICAgICAgICB0aGlzLm1vdW50SU9UKCk7CiAgICAgICAgY29uc29sZS5sb2coJ01vdW50aW5nIHdlYnNvY2tldCcpOwogICAgICB9CiAgICB9LAogICAgaGFzaDogZnVuY3Rpb24gaGFzaCgpIHsKICAgICAgY29uc29sZS5sb2coJ0lvVCBzdWJzY3JpYmluZyB0byAnLCB0aGlzLmhhc2gpOwogICAgICB0aGlzLnN1YnNjcmliZSh0aGlzLmhhc2gpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUodG9waWMpIHsKICAgICAgY29uc29sZS5sb2coJ0lvVCBzdWJjcmliaW5nIHRvICcsIHRvcGljKTsKICAgICAgbXF0dENsaWVudC5zdWJzY3JpYmUodG9waWMpOwogICAgfSwKICAgIG1vdW50SU9UOiBmdW5jdGlvbiBtb3VudElPVCgpIHsKICAgICAgdmFyIF9zdG9yZSA9IHRoaXMuJHN0b3JlOwoKICAgICAgdmFyIEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTsKCiAgICAgIHZhciBBV1NJb1REYXRhID0gcmVxdWlyZSgnYXdzLWlvdC1kZXZpY2Utc2RrJyk7CgogICAgICB2YXIgZXJyb3JDb3VudCA9IDA7CiAgICAgIHZhciBBV1NDb25maWd1cmF0aW9uID0gewogICAgICAgIHBvb2xJZDogdGhpcy4kcG9vbElkLAogICAgICAgIC8vJ3VzLWVhc3QtMTplNDgwM2QzYi00MmQ1LTQ5NmYtOWM1YS00MDhmMjBlYjI4ZTQnLCAvLyAnWW91ckNvZ25pdG9JZGVudGl0eVBvb2xJZCcKICAgICAgICBob3N0OiB0aGlzLiRob3N0LAogICAgICAgIC8vICdZb3VyQXdzSW9URW5kcG9pbnQnLCBlLmcuICdwcmVmaXguaW90LnVzLWVhc3QtMS5hbWF6b25hd3MuY29tJwogICAgICAgIHJlZ2lvbjogdGhpcy4kcmVnaW9uIC8vICdZb3VyQXdzUmVnaW9uJywgZS5nLiAndXMtZWFzdC0xJwoKICAgICAgfTsKICAgICAgdmFyIGN1cnJlbnRseVN1YnNjcmliZWRUb3BpYyA9ICduZXctYW5zd2VyJzsKICAgICAgdmFyIGNsaWVudElkID0gJ2Fza0Fyb3VuZE1lLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAgKyAxKTsKICAgICAgQVdTLmNvbmZpZy5yZWdpb24gPSBBV1NDb25maWd1cmF0aW9uLnJlZ2lvbjsKICAgICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscyA9IG5ldyBBV1MuQ29nbml0b0lkZW50aXR5Q3JlZGVudGlhbHMoewogICAgICAgIElkZW50aXR5UG9vbElkOiBBV1NDb25maWd1cmF0aW9uLnBvb2xJZAogICAgICB9KTsKICAgICAgY29uc29sZS5sb2coJ0lvVCBjcmVhdGVkJyk7CiAgICAgIG1xdHRDbGllbnQgPSBBV1NJb1REYXRhLmRldmljZSh7CiAgICAgICAgcmVnaW9uOiBBV1MuY29uZmlnLnJlZ2lvbiwKICAgICAgICBob3N0OiBBV1NDb25maWd1cmF0aW9uLmhvc3QsCiAgICAgICAgY2xpZW50SWQ6IGNsaWVudElkLAogICAgICAgIHByb3RvY29sOiAnd3NzJywKICAgICAgICBtYXhpbXVtUmVjb25uZWN0VGltZU1zOiA4MDAwLAogICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICBhY2Nlc3NLZXlJZDogJycsCiAgICAgICAgc2VjcmV0S2V5OiAnJywKICAgICAgICBzZXNzaW9uVG9rZW46ICcnCiAgICAgIH0pOwogICAgICB2YXIgY29nbml0b0lkZW50aXR5ID0gbmV3IEFXUy5Db2duaXRvSWRlbnRpdHkoKTsKCiAgICAgIHZhciBnZXRDcmVkcyA9IGZ1bmN0aW9uIGdldENyZWRzKCkgewogICAgICAgIEFXUy5jb25maWcuY3JlZGVudGlhbHMuZ2V0KGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXRyaWV2ZWQgaWRlbnRpdHk6ICcgKyBBV1MuY29uZmlnLmNyZWRlbnRpYWxzLmlkZW50aXR5SWQsIGRhdGEpOwogICAgICAgICAgICB2YXIgcGFyYW1zID0gewogICAgICAgICAgICAgIElkZW50aXR5SWQ6IEFXUy5jb25maWcuY3JlZGVudGlhbHMuaWRlbnRpdHlJZAogICAgICAgICAgICB9OwogICAgICAgICAgICBjb2duaXRvSWRlbnRpdHkuZ2V0Q3JlZGVudGlhbHNGb3JJZGVudGl0eShwYXJhbXMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKICAgICAgICAgICAgICBpZiAoIWVycikgewogICAgICAgICAgICAgICAgbXF0dENsaWVudC51cGRhdGVXZWJTb2NrZXRDcmVkZW50aWFscyhkYXRhLkNyZWRlbnRpYWxzLkFjY2Vzc0tleUlkLCBkYXRhLkNyZWRlbnRpYWxzLlNlY3JldEtleSwgZGF0YS5DcmVkZW50aWFscy5TZXNzaW9uVG9rZW4pOwogICAgICAgICAgICAgIH0gZWxzZSB7Ly8gY29uc29sZS5sb2coJ2Vycm9yIHJldHJpZXZpbmcgY3JlZGVudGlhbHM6ICcgKyBlcnIpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0gZWxzZSB7Ly8gY29uc29sZS5sb2coJ2Vycm9yIHJldHJpZXZpbmcgaWRlbnRpdHk6JyArIGVycikKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfTsKCiAgICAgIG1xdHRDbGllbnQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ21xdHRDbGllbnQgY29ubmVjdGVkJyk7CiAgICAgICAgbXF0dENsaWVudC5zdWJzY3JpYmUoY3VycmVudGx5U3Vic2NyaWJlZFRvcGljKTsKICAgICAgfSk7CiAgICAgIG1xdHRDbGllbnQub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycikgewogICAgICAgIGlmIChlcnJvckNvdW50ID4gMCkgewogICAgICAgICAgY29uc29sZS5sb2coJ21xdHRDbGllbnQgZXJyb3I6JywgZXJyKTsKICAgICAgICB9CgogICAgICAgIGVycm9yQ291bnQrKzsKICAgICAgICBnZXRDcmVkcygpOwogICAgICB9KTsKICAgICAgbXF0dENsaWVudC5vbignbWVzc2FnZScsIGZ1bmN0aW9uICh0b3BpYywgcGF5bG9hZCkgewogICAgICAgIHZhciBtc2cgPSBKU09OLnBhcnNlKHBheWxvYWQudG9TdHJpbmcoKSk7CiAgICAgICAgY29uc29sZS5sb2coJ0lvVCBtc2c6ICcsIHRvcGljLCBtc2cpOwoKICAgICAgICBpZiAodG9waWMgPT09ICduZXctYW5zd2VyJykgewogICAgICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZScpOwoKICAgICAgICAgIF9zdG9yZS5jb21taXQoJ3VwZGF0ZVF1ZXN0aW9uJywgbXNnKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2coJ05ldyBxdWVzdGlvbicpOwoKICAgICAgICAgIF9zdG9yZS5jb21taXQoJ3NhdmVRdWVzdGlvbicsIG1zZyk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["IoT.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div></div>\n</template>\n\n<script>\n  import { mapState } from 'vuex'\n  let mqttClient\n\n  export default {\n    name: 'IoT',\n    computed: {\n      ...mapState({\n        init: (state) => state.initialized,\n        hash: (state) => state.hashKey\n      })\n    },\n    watch: {\n      // The effect of this is to wait until the user is logged\n      // in before making the websocket connection.\n      init: function () {\n        if (this.init) {\n          this.mountIOT()\n          console.log('Mounting websocket')\n        }\n      },\n      hash: function() {\n        console.log('IoT subscribing to ', this.hash)\n        this.subscribe(this.hash)\n      }\n    },\n    methods: {\n      subscribe (topic) {\n        console.log('IoT subcribing to ', topic)\n        mqttClient.subscribe(topic)\n      },\n      mountIOT () {\n        let _store = this.$store\n\n        const AWS = require('aws-sdk')\n        const AWSIoTData = require('aws-iot-device-sdk')\n        let errorCount = 0\n\n        const AWSConfiguration = {\n          poolId: this.$poolId, //'us-east-1:e4803d3b-42d5-496f-9c5a-408f20eb28e4', // 'YourCognitoIdentityPoolId'\n          host: this.$host, // 'YourAwsIoTEndpoint', e.g. 'prefix.iot.us-east-1.amazonaws.com'\n          region: this.$region // 'YourAwsRegion', e.g. 'us-east-1'\n        }\n\n        var currentlySubscribedTopic = 'new-answer'\n        var clientId = 'askAroundMe-' + (Math.floor((Math.random() * 100000) + 1))\n        AWS.config.region = AWSConfiguration.region\n\n        AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n          IdentityPoolId: AWSConfiguration.poolId\n        })\n\n        console.log('IoT created')\n        mqttClient = AWSIoTData.device({\n          region: AWS.config.region,\n          host: AWSConfiguration.host,\n          clientId: clientId,\n          protocol: 'wss',\n          maximumReconnectTimeMs: 8000,\n          debug: false,\n          accessKeyId: '',\n          secretKey: '',\n          sessionToken: ''\n        })\n\n        const cognitoIdentity = new AWS.CognitoIdentity()\n        const getCreds = function () {\n          AWS.config.credentials.get(function (err, data) {\n            if (!err) {\n              console.log('retrieved identity: ' + AWS.config.credentials.identityId, data)\n              const params = {\n                IdentityId: AWS.config.credentials.identityId\n              }\n              cognitoIdentity.getCredentialsForIdentity(params, function (err, data) {\n                if (!err) {\n                  mqttClient.updateWebSocketCredentials(data.Credentials.AccessKeyId,\n                    data.Credentials.SecretKey,\n                    data.Credentials.SessionToken)\n                } else {\n                  // console.log('error retrieving credentials: ' + err)\n                }\n              })\n            } else {\n              // console.log('error retrieving identity:' + err)\n            }\n          })\n        }\n\n        mqttClient.on('connect', function () {\n          console.log('mqttClient connected')\n          mqttClient.subscribe(currentlySubscribedTopic)\n        })\n\n        mqttClient.on('error', function (err) {\n          if (errorCount > 0) {\n            console.log('mqttClient error:', err)\n          }\n          errorCount++\n          getCreds()\n        })\n\n        mqttClient.on('message', function (topic, payload) {\n          const msg = JSON.parse(payload.toString())\n          console.log('IoT msg: ', topic, msg)\n          if (topic === 'new-answer') {\n            console.log('update')\n            _store.commit('updateQuestion', msg)\n          } else {\n            console.log('New question')\n            _store.commit('saveQuestion', msg)\n          }\n        })\n      }\n    }\n  }\n</script>"],"sourceRoot":"src/components"}]}